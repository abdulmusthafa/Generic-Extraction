#!/usr/bin/env python


import requests
import sys

restversion = "1.0"
username="Admin"
password="admin"
baseurl="http://536918-app1.exusia.com:8080/dgc/rest"

def postCommunity(name,desc):

        endpoint = "community"
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)

        payload = {'name': name,'description' : desc}

        r = requests.post(url, auth=(username,password), data=payload)

        if r.status_code != 201:
                print "Error in post, Response had a status of %s" % r.status_code
                sys.exit(1)

def communityFind(name):

 endpoint = "community/find"
 url = "%s/%s/%s" % (baseurl, restversion, endpoint)

 payload = {'searchName': name}

 r = requests.get(url, auth=(username,password), params=payload)
 j = r.json()
 i=0
 while(1) :
        try :
                  commName=j['communityReference'][i]['name']
                  if(commName==name):
                        return j['communityReference'][i]['resourceId']
                        break
                  else:
                        i=i+1
        except IndexError:
                print '%s Community not found' % name
                break

def getCommunityAttachment(name):

        rid=communityFind(name)

        endpoint = "community/%s/attachments" % rid
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)


        payload = {'baseResource': rid}

        r = requests.get(url, auth=(username,password), params=payload)
        if r.status_code == 204:
                print "No attachement found %s" % r.status_code
                sys.exit(1)
        j=r.json()
        return j

def getCommunityParent(name):

        baseurl="http://536918-app1.exusia.com:8080/dgc/rest"

        rid=communityFind(name)

        endpoint = "community/%s/parent" % rid
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)


        payload = {'community': rid}

        r = requests.get(url, auth=(username,password), params=payload)

        if r.status_code != 200:
                print "Error in request, Response had status of %s " % r.status_code
                sys.exit(1)
        j=r.json()
        return j

def postCommunityParent(name,p_name):

        baseurl="http://536918-app1.exusia.com:8080/dgc/rest"

        rid=communityFind(name)
        p_rid=communityFind(p_name)

        endpoint = "community/%s/parent" % rid
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)

        p_rid=communityFind(p_name)
        payload = {'community': rid, 'parent':p_rid}

        r = requests.post(url, auth=(username,password), data=payload)

        if r.status_code != 200:
                print "Error in request, Response had status of %s" % r.status_code
                sys.exit(1)
        j=r.json()
        return "%s community is successfully updated as child of %s community" %( name,p_name)

def deleteCommunityParent(name):

        baseurl="http://536918-app1.exusia.com:8080/dgc/rest"

        rid=communityFind(name)

        endpoint = "community/%s/parent" % rid
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)


        payload = {'community': rid}

        r = requests.delete(url, auth=(username,password), params=payload)

        if r.status_code != 200:
                print "Error in request, Response had status of %s " % r.status_code
                sys.exit(1)
        j=r.json()
        return j

def getSubCommunity(name):

        baseurl="http://536918-app1.exusia.com:8080/dgc/rest"

        rid=communityFind(name)

        endpoint = "community/%s/sub-communities" % rid
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)


        payload = {'community': rid}

        r = requests.get(url, auth=(username,password), params=payload)

        if r.status_code != 200:
                print "Error in request, Response had status of %s " % r.status_code
                sys.exit(1)
        j=r.json()
        return j

def getCommunityVocab(name,vocab):

        baseurl="http://536918-app1.exusia.com:8080/dgc/rest"

        rid=communityFind(name)

        endpoint = "community/%s/vocabularies" % rid
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)


        payload = {'community': rid,'searchName':vocab}

        r = requests.get(url, auth=(username,password), params=payload)

        if r.status_code != 200:
                print "Error in request, Response had status of %s " % r.status_code
                sys.exit(1)
        j=r.json()
        return j

def postCommunityDesc(name,desc):

        rid=communityFind(name)

        endpoint = "community/%s/description" % rid
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)


        payload = {'community': rid, 'description':desc}

        r = requests.post(url, auth=(username,password), data=payload)
        if r.status_code != 200:
                print "Error in request, Response had status of %s " % r.status_code
                sys.exit(1)
        j=r.json()
        return j

def getCommunityTask(name):

        rid=communityFind(name)

        global username; username = 'sme_user'
        global password; password = 'Exusia'

        endpoint = "community/%s/task" % rid
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)


        payload = {'community': rid}

        r = requests.get(url, auth=(username,password), params=payload)
        if r.status_code != 200:
                print "Error in request, Response had status of %s " % r.status_code
                sys.exit(1)
        j=r.json()
        return j

def getCommunityTerm(name,*term):

        rid=communityFind(name)

        endpoint = "community/%s/terms" % rid
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)


        payload = {'community': rid,'searchSignifier' : term}

        r = requests.get(url, auth=(username,password), params=payload)
        if r.status_code != 200:
                print "Error in request, Response had status of %s " % r.status_code
                sys.exit(1)
        j=r.json()
        return j

def deleteCommunityAsync(name,*name_list):

        rid=communityFind(name)

        rid_list=[communityFind(x) for x in name_list]
        list=[rid]+rid_list

        endpoint = "community/remove/async"
        url = "%s/%s/%s" % (baseurl, restversion, endpoint)


        payload = {'resource': list}

        r = requests.delete(url, auth=(username,password), data=payload)
        if r.status_code != 200:
                print "Error in request, Response had status of %s " % r.status_code
                sys.exit(1)
        return r.text
